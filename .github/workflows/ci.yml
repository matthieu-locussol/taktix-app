name: CI

on:
   push:
      branches:
         - master
   pull_request:

jobs:
   build:
      name: Build
      runs-on: ubuntu-latest
      steps:
         - uses: actions/checkout@v3
         - uses: actions/setup-node@v3
           with:
              node-version: '18.4.0'
         - uses: pnpm/action-setup@v2
           name: Install pnpm
           id: pnpm-install
           with:
              version: 7
              run_install: false
         - name: Get pnpm store directory
           id: pnpm-cache
           shell: bash
           run: |
              echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
         - uses: actions/cache@v3
           name: Setup pnpm cache
           with:
              path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
              key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
              restore-keys: |
                 ${{ runner.os }}-pnpm-store-
         - run: pnpm install
         - run: pnpm build:shared
         - run: pnpm build
         - run: pnpm test

   release:
      name: Release
      if: github.ref == 'refs/heads/master'
      strategy:
         matrix:
            os: [ubuntu-latest, macos-latest, windows-latest]
      runs-on: ${{ matrix.os }}
      steps:
         - uses: actions/checkout@v3
         - uses: actions/setup-node@v3
           with:
              node-version: '18.4.0'
         - uses: pnpm/action-setup@v2
           name: Install pnpm
           id: pnpm-install
           with:
              version: 7
              run_install: false
         - name: Get pnpm store directory
           id: pnpm-cache
           shell: bash
           run: |
              echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
         - uses: actions/cache@v3
           name: Setup pnpm cache
           with:
              path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
              key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
              restore-keys: |
                 ${{ runner.os }}-pnpm-store-
         - name: install Rust stable
           uses: dtolnay/rust-toolchain@stable
         - name: install dependencies (ubuntu only)
           if: matrix.os == 'ubuntu-latest'
           run: |
              sudo apt-get update
              sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
         - run: pnpm install
         - run: pnpm build:shared
         - run: pnpm build
         - uses: tauri-apps/tauri-action@v0
           env:
              GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
              TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
           with:
              tagName: v__VERSION__
              releaseName: 'v__VERSION__'
              releaseBody: 'See the assets to download this version and install.'
              releaseDraft: false
              prerelease: false

   deploy:
      name: Deploy
      runs-on: ubuntu-latest
      needs: [build]
      if: github.ref == 'refs/heads/master'
      steps:
         - run: echo "${{ secrets.SSHKEY }}" > key.pem
         - run: chmod 600 key.pem
         - run:
              ssh -i key.pem ${{ secrets.USER }}@${{ secrets.HOST }} -o ConnectTimeout=1200 -o
              StrictHostKeyChecking=no "cd ${{ secrets.DIR }} && git pull origin master && ${{
              secrets.INSTALL_COMMAND }} && ${{ secrets.BUILD_COMMAND }} && ${{
              secrets.RESTART_COMMAND }}"

   merge_dependabot:
      name: 'Merge (Dependabot)'
      needs: [build]
      runs-on: ubuntu-latest
      permissions:
         pull-requests: write
      if: ${{ github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'}}
      steps:
         - run: gh pr merge --auto --merge "$PR_URL"
           env:
              PR_URL: ${{github.event.pull_request.html_url}}
              GITHUB_TOKEN: ${{secrets.CUSTOM_GITHUB_TOKEN}}
