name: CI

on:
   push:
      branches:
         - master
   pull_request:

jobs:
   build:
      name: Build
      runs-on: ubuntu-latest
      steps:
         - uses: actions/checkout@v4
         - uses: actions/setup-node@v4
           with:
              node-version: '20.10.0'
         - uses: pnpm/action-setup@v2
           name: Install pnpm
           with:
              version: 8
              run_install: false
         - name: Get pnpm store directory
           shell: bash
           run: |
              echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
         - uses: actions/cache@v4
           name: Setup pnpm cache
           with:
              path: ${{ env.STORE_PATH }}
              key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
              restore-keys: |
                 ${{ runner.os }}-pnpm-store-
         - run: pnpm install
         - run: pnpm build
         - run: pnpm test

   startMaintenance:
      name: Start Maintenance
      runs-on: ubuntu-latest
      needs: [build]
      if: github.ref == 'refs/heads/master'
      steps:
         - run: |
              curl "${{ secrets.MAINTENANCE_ENDPOINT }}" \
                 -sSf \
                 -H 'Accept: application/json' \
                 -H 'Accept-Language: fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7' \
                 -H 'Connection: keep-alive' \
                 -H 'Content-Type: application/json' \
                 --data-raw '{"type":"start","token":"${{ secrets.MAINTENANCE_TOKEN }}"}' \
                 --compressed

   deploy:
      name: Update Server
      runs-on: ubuntu-latest
      needs: [startMaintenance]
      if: github.ref == 'refs/heads/master'
      steps:
         - run: echo "${{ secrets.SSHKEY }}" > key.pem
         - run: chmod 600 key.pem
         - run:
              ssh -i key.pem ${{ secrets.USER }}@${{ secrets.HOST }} -o ConnectTimeout=1200 -o
              StrictHostKeyChecking=no "cd ${{ secrets.DIR }} && git checkout . && git pull origin
              master && ${{ secrets.INSTALL_COMMAND }} && ${{ secrets.BUILD_COMMAND }} && ${{
              secrets.RESTART_COMMAND }}"

   changelog:
      name: Changelog
      runs-on: ubuntu-latest
      needs: [deploy]
      if: github.ref == 'refs/heads/master'
      outputs:
         changelog: ${{ steps.build_changelog.outputs.changelog }}
      steps:
         - uses: actions/checkout@v4
           name: Checkout repository
           with:
              fetch-depth: 0
         - name: Retrieve current tag
           run:
              echo "CURRENT_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' |
              sed -n '1p')" >> "$GITHUB_ENV"
         - name: Retrieve previous tag
           run:
              echo "PREV_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sed
              -n '2p')" >> "$GITHUB_ENV"
         - run: EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
         - run: echo "changelog<<$EOF" >> "$GITHUB_OUTPUT"
         - name: Build changelog
           id: build_changelog
           run:
              echo "$({ git log $PREV_TAG...$CURRENT_TAG --pretty=format:"- %s" | grep '^-
              feat' | sed 's/^- feat:/- New:/'; git log $PREV_TAG...$CURRENT_TAG --pretty=format:"-
              %s" | grep '^- fix' | sed 's/^- fix:/- Fixed/'; })" >> "$GITHUB_OUTPUT"
         - run: echo "$EOF" >> "$GITHUB_OUTPUT"

   release:
      name: Update Client
      needs: [changelog]
      if: github.ref == 'refs/heads/master'
      strategy:
         matrix:
            os: [ubuntu-latest, macos-latest, windows-latest]
      runs-on: ${{ matrix.os }}
      steps:
         - uses: actions/checkout@v4
         - uses: actions/setup-node@v4
           with:
              node-version: '20.10.0'
         - uses: pnpm/action-setup@v2
           name: Install pnpm
           with:
              version: 8
              run_install: false
         - name: Get pnpm store directory
           shell: bash
           run: |
              echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
         - uses: actions/cache@v4
           name: Setup pnpm cache
           with:
              path: ${{ env.STORE_PATH }}
              key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
              restore-keys: |
                 ${{ runner.os }}-pnpm-store-
         - name: install Rust stable
           uses: dtolnay/rust-toolchain@stable
         - name: install dependencies (ubuntu only)
           if: matrix.os == 'ubuntu-latest'
           run: |
              sudo apt-get update
              sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
         - run: pnpm install
         - run: pnpm build:shared
         - run: pnpm build
         - uses: tauri-apps/tauri-action@v0
           env:
              GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
              TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
           with:
              tagName: v__VERSION__
              releaseName: 'v__VERSION__'
              releaseBody:
                 ${{ needs.changelog.outputs.changelog || 'See the assets to download this version
                 and install it.' }}
              releaseDraft: false
              prerelease: false

   endMaintenance:
      name: End Maintenance
      runs-on: ubuntu-latest
      needs: [release]
      if: github.ref == 'refs/heads/master'
      steps:
         - run: |
              curl "${{ secrets.MAINTENANCE_ENDPOINT }}" \
                 -sSf \
                 -H 'Accept: application/json' \
                 -H 'Accept-Language: fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7' \
                 -H 'Connection: keep-alive' \
                 -H 'Content-Type: application/json' \
                 --data-raw '{"type":"end","token":"${{ secrets.MAINTENANCE_TOKEN }}"}' \
                 --compressed
